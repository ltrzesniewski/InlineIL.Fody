<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="$(MonoCecilPath)" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="Mono.Cecil.Cil" #>
<#
    var cecilCodes = typeof(OpCodes)
        .GetFields(BindingFlags.Public | BindingFlags.Static)
        .Where(field => field.IsInitOnly && field.FieldType == typeof(OpCode))
        .Select(field => new { fieldName = field.Name, opCode = (OpCode)field.GetValue(null) })
        .OrderBy(i => unchecked((ushort)i.opCode.Value))
        .ToList();

    var reflectionEmitCodes = typeof(System.Reflection.Emit.OpCodes)
        .GetFields(BindingFlags.Public | BindingFlags.Static)
        .Where(field => field.IsInitOnly && field.FieldType == typeof(System.Reflection.Emit.OpCode))
        .Select(field => new { fieldName = field.Name, opCode = (System.Reflection.Emit.OpCode)field.GetValue(null) })
        .ToDictionary(i => i.opCode.Value);

    var xmlDocs = XDocument.Load(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ProgramFilesX86), @"Reference Assemblies\Microsoft\Framework\.NETFramework\v4.X\mscorlib.xml"))!
        .Root!
        .Element("members")!
        .Elements("member")
        .ToDictionary(elem => elem.Attribute("name")!.Value, elem => elem);

    static string EscapeXml(string value) => value.Replace("&", "&amp;").Replace("<", "&lt;").Replace(">", "&gt;");

    string GetInstructionXmlDoc(OpCode opCode)
    {
        if (!reflectionEmitCodes.TryGetValue(opCode.Value, out var reflectionEmitCode))
            throw new InvalidOperationException($"Could not find opcode: {opCode}");

        var sb = new StringBuilder();
        sb.AppendLine("<summary>");
        sb.Append("<c>").Append(opCode.Name).Append("</c> - ");
        AppendXmlDoc(sb, "F:System.Reflection.Emit.OpCodes." + reflectionEmitCode.fieldName);
        TrimEnd(sb);
        sb.AppendLine();
        sb.AppendLine("</summary>");

        sb.AppendLine("<remarks>");
        sb.AppendLine(
            opCode.OpCodeType == OpCodeType.Prefix
                ? "<para>This is a prefix instruction.</para>"
                : $"<para>Stack Transition: {GetStackTransition(opCode)}</para>"
        );
        sb.AppendLine("</remarks>");

        return sb.ToString();
    }

    void AppendXmlDoc(StringBuilder sb, string elementId)
    {
        if (!xmlDocs.TryGetValue(elementId, out var elementNode))
            throw new ArgumentException($"No docs found for {elementId}");

        var summary = elementNode.Element("summary");

        foreach (var node in summary!.Nodes())
        {
            switch (node)
            {
                case XText text:
                    sb.Append(EscapeXml(text.Value));
                    break;

                case XElement elem when elem.Name == "see" && elem.Attribute("cref") != null:
                    sb.Append(@"<see cref=""");
                    sb.Append(EscapeXml(elem.Attribute("cref")!.Value.Substring(2)));
                    sb.Append(@""" />");
                    break;

                case XElement elem when elem.Name == "see" && elem.Attribute("langword")?.Value == "":
                    sb.Append("*"); // Missing info in the docs
                    break;

                case XElement elem when elem.Name == "see" || elem.Name == "paramref":
                    sb.Append(EscapeXml(elem.Attributes().Single().Value));
                    break;

                default:
                    throw new InvalidOperationException($"Unsupported construct: {node}");
            }
        }
    }

    static void TrimEnd(StringBuilder sb)
    {
        while (sb.Length > 0 && char.IsWhiteSpace(sb[sb.Length - 1]))
            --sb.Length;
    }

    static string GetStackTransition(OpCode opCode)
    {
        if (opCode.StackBehaviourPop == StackBehaviour.Pop0 && opCode.StackBehaviourPush == StackBehaviour.Push0)
            return "none";

        if (opCode.StackBehaviourPop == StackBehaviour.PopAll && opCode.StackBehaviourPush == StackBehaviour.Push0)
            return "clears the stack";

        var pop = GetStackBehaviour(opCode, opCode.StackBehaviourPop);
        var push = GetStackBehaviour(opCode, opCode.StackBehaviourPush);

        if (opCode.StackBehaviourPop == StackBehaviour.Pop0)
            return $"... -&gt; ..., {push}";

        if (opCode.StackBehaviourPush == StackBehaviour.Push0)
            return $"..., {pop} -&gt; ...";

        return $"..., {pop} -&gt; ..., {push}";
    }

    static string GetStackBehaviour(OpCode opCode, StackBehaviour behaviour)
    {
        return behaviour switch
        {
            StackBehaviour.Pop0               => "(none)",
            StackBehaviour.Pop1               => "value",
            StackBehaviour.Pop1_pop1          => "value, value",
            StackBehaviour.Popi               => "I",
            StackBehaviour.Popi_pop1          => "I, value",
            StackBehaviour.Popi_popi          => "I, I",
            StackBehaviour.Popi_popi8         => "I, I8",
            StackBehaviour.Popi_popi_popi     => "I, I, I",
            StackBehaviour.Popi_popr4         => "I, R4",
            StackBehaviour.Popi_popr8         => "I, R8",
            StackBehaviour.Popref             => "O",
            StackBehaviour.Popref_pop1        => "O, value",
            StackBehaviour.Popref_popi        => "O, I",
            StackBehaviour.Popref_popi_popi   => "O, I, I",
            StackBehaviour.Popref_popi_popi8  => "O, I, I8",
            StackBehaviour.Popref_popi_popr4  => "O, I, R4",
            StackBehaviour.Popref_popi_popr8  => "O, I, R8",
            StackBehaviour.Popref_popi_popref => "O, I, O",
            StackBehaviour.PopAll             => "(all)",
            StackBehaviour.Push0              => "(none)",
            StackBehaviour.Push1              => "value",
            StackBehaviour.Push1_push1        => "value, value",
            StackBehaviour.Pushi              => "I",
            StackBehaviour.Pushi8             => "I8",
            StackBehaviour.Pushr4             => "R4",
            StackBehaviour.Pushr8             => "R8",
            StackBehaviour.Pushref            => "O",
            StackBehaviour.Varpop             => opCode.Code == Code.Ret ? "return value (if method does not return <c>void</c>)" : "arg0, arg1, ..., argN",
            StackBehaviour.Varpush            => "return value (if callee does not return <c>void</c>)",
            _                                 => throw new ArgumentOutOfRangeException()
        };
    }
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Diagnostics.CodeAnalysis;

namespace InlineIL;

partial class IL
{
    /// <summary>
    /// Emits an IL instruction.
    /// </summary>
    [SuppressMessage("ReSharper", "InconsistentNaming")]
    [SuppressMessage("ReSharper", "UnusedParameter.Global")]
    [SuppressMessage("ReSharper", "UnusedMember.Global")]
    [SuppressMessage("ReSharper", "MemberHidesStaticFromOuterClass")]
    [SuppressMessage("ReSharper", "IdentifierTypo")]
    [SuppressMessage("ReSharper", "CommentTypo")]
    public static partial class Emit
    {
<#
    foreach (var item in cecilCodes)
    {
        if (item.opCode == OpCodes.No)
            continue;

        var xmlDoc = GetInstructionXmlDoc(item.opCode).Trim().Replace("\n", "\n        /// ");

        switch (item.opCode.OperandType)
        {
            case OperandType.InlineNone:
#>
        /// <#= xmlDoc #>
        public static void <#= item.fieldName #>()
            => IL.Throw();
<#
                break;

            //  ##### Constants #####

            case OperandType.InlineI:
#>
        /// <#= xmlDoc #>
        /// <param name="operand">The operand.</param>
        public static void <#= item.fieldName #>(int operand)
            => IL.Throw();
<#
                break;

            case OperandType.ShortInlineI:
            {
                var operandType = item.opCode == OpCodes.Ldc_I4_S ? "sbyte" : "byte";
#>
        /// <#= xmlDoc #>
        /// <param name="operand">The operand.</param>
        public static void <#= item.fieldName #>(<#= operandType #> operand)
            => IL.Throw();
<#
                break;
            }

            case OperandType.InlineI8:
#>
        /// <#= xmlDoc #>
        /// <param name="operand">The operand.</param>
        public static void <#= item.fieldName #>(long operand)
            => IL.Throw();
<#
                break;

            case OperandType.InlineR:
#>
        /// <#= xmlDoc #>
        /// <param name="operand">The operand.</param>
        public static void <#= item.fieldName #>(double operand)
            => IL.Throw();
<#
                break;

            case OperandType.ShortInlineR:
#>
        /// <#= xmlDoc #>
        /// <param name="operand">The operand.</param>
        public static void <#= item.fieldName #>(float operand)
            => IL.Throw();
<#
                break;

            case OperandType.InlineString:
#>
        /// <#= xmlDoc #>
        /// <param name="operand">The operand.</param>
        public static void <#= item.fieldName #>(string operand)
            => IL.Throw();
<#
                break;

            // ##### Metadata tokens #####

            case OperandType.InlineType:
#>
        /// <#= xmlDoc #>
        /// <param name="type">The type reference.</param>
        public static void <#= item.fieldName #>(TypeRef type)
            => IL.Throw();

        /// <#= xmlDoc #>
        /// <typeparam name="T">The type reference.</typeparam>
        public static void <#= item.fieldName #><T>()
#if NET9_0_OR_GREATER
            where T : allows ref struct
#endif
            => IL.Throw();
<#
                break;

            case OperandType.InlineMethod:
#>
        /// <#= xmlDoc #>
        /// <param name="method">The method reference.</param>
        public static void <#= item.fieldName #>(MethodRef method)
            => IL.Throw();
<#
                break;

            case OperandType.InlineField:
#>
        /// <#= xmlDoc #>
        /// <param name="field">The field reference.</param>
        public static void <#= item.fieldName #>(FieldRef field)
            => IL.Throw();
<#
                break;

            case OperandType.InlineTok:
#>
        /// <#= xmlDoc #>
        /// <param name="type">The type reference.</param>
        public static void <#= item.fieldName #>(TypeRef type)
            => IL.Throw();

        /// <#= xmlDoc #>
        /// <typeparam name="T">The type reference.</typeparam>
        public static void <#= item.fieldName #><T>()
#if NET9_0_OR_GREATER
            where T : allows ref struct
#endif
            => IL.Throw();

        /// <#= xmlDoc #>
        /// <param name="method">The method reference.</param>
        public static void <#= item.fieldName #>(MethodRef method)
            => IL.Throw();

        /// <#= xmlDoc #>
        /// <param name="field">The field reference.</param>
        public static void <#= item.fieldName #>(FieldRef field)
            => IL.Throw();
<#
                break;

            // ##### Labels #####

            case OperandType.InlineBrTarget:
            case OperandType.ShortInlineBrTarget:
#>
        /// <#= xmlDoc #>
        /// <param name="labelName">The target label name.</param>
        public static void <#= item.fieldName #>(string labelName)
            => IL.Throw();
<#
                break;

            case OperandType.InlineSwitch:
#>
        /// <#= xmlDoc #>
        /// <param name="labelNames">The target label names.</param>
        public static void <#= item.fieldName #>(params string[] labelNames)
            => IL.Throw();
<#
                break;

            // ##### Locals #####

            case OperandType.InlineVar:
#>
        /// <#= xmlDoc #>
        /// <param name="name">The local variable name, declared with <see cref="IL.DeclareLocals(LocalVar[])" />.</param>
        public static void <#= item.fieldName #>(string name)
            => IL.Throw();

        /// <#= xmlDoc #>
        /// <param name="index">The local variable index.</param>
        public static void <#= item.fieldName #>(ushort index)
            => IL.Throw();
<#
                break;

            case OperandType.ShortInlineVar:
#>
        /// <#= xmlDoc #>
        /// <param name="name">The local variable name, declared with <see cref="IL.DeclareLocals(LocalVar[])" />.</param>
        public static void <#= item.fieldName #>(string name)
            => IL.Throw();

        /// <#= xmlDoc #>
        /// <param name="index">The local variable index.</param>
        public static void <#= item.fieldName #>(byte index)
            => IL.Throw();
<#
                break;

            // ##### Arguments #####

            case OperandType.InlineArg:
#>
        /// <#= xmlDoc #>
        /// <param name="name">The parameter name.</param>
        public static void <#= item.fieldName #>(string name)
            => IL.Throw();

        /// <#= xmlDoc #>
        /// <param name="index">The argument index.</param>
        public static void <#= item.fieldName #>(ushort index)
            => IL.Throw();
<#
                break;

            case OperandType.ShortInlineArg:
#>
        /// <#= xmlDoc #>
        /// <param name="name">The parameter name.</param>
        public static void <#= item.fieldName #>(string name)
            => IL.Throw();

        /// <#= xmlDoc #>
        /// <param name="index">The argument index.</param>
        public static void <#= item.fieldName #>(byte index)
            => IL.Throw();
<#
                break;

            // ##### Other #####

            case OperandType.InlineSig:
#>
        /// <#= xmlDoc #>
        /// <param name="signature">The method signature.</param>
        public static void <#= item.fieldName #>(StandAloneMethodSig signature)
            => IL.Throw();
<#
                break;

            default:
                throw new NotSupportedException($"Not supported: {item.opCode.OperandType}");
        }
#>

<#
    }
#>
    }
}
